import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import { executeMysqlQuery } from '../config/db.js';
import User from '../models/user.js';

export const login = async (req, res) => {
  try {
    const { email, password } = req.body;

    const usersData = await executeMysqlQuery(
      `
      SELECT u.*, GROUP_CONCAT(r.role_name) as roles 
      FROM users u 
      LEFT JOIN user_roles ur ON u.user_id = ur.user_id 
      LEFT JOIN roles r ON ur.role_id = r.role_id 
      WHERE u.email = ? 
      GROUP BY u.user_id
      `,
      [email]
    );

    if (usersData.length === 0) {
      return res.status(401).json({
        error: 'Invalid credentials',
        message: 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng',
      });
    }

    const userData = usersData[0];
    const user = new User({
      ...userData,
      roles: userData.roles ? userData.roles.split(',') : [],
    });

    // ‚úÖ Ki·ªÉm tra m·∫≠t kh·∫©u (hash ho·∫∑c plaintext)
    let isValidPassword = false;

    if (user.password_hash) {
      if (user.password_hash.startsWith('$2b$')) {
        // üîπ Tr∆∞·ªùng h·ª£p m·∫≠t kh·∫©u m√£ h√≥a b·∫±ng bcrypt
        isValidPassword = await bcrypt.compare(password, user.password_hash);
      } else {
        // üîπ Tr∆∞·ªùng h·ª£p m·∫≠t kh·∫©u l∆∞u d·∫°ng plaintext (√≠t g·∫∑p)
        isValidPassword = password === user.password_hash;
      }
    }

    if (!isValidPassword) {
      return res.status(401).json({
        error: 'Invalid credentials',
        message: 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng',
      });
    }

    // ‚úÖ T·∫°o JWT token
    const token = jwt.sign(
      {
        user_id: user.user_id,
        email: user.email,
        roles: user.roles,
      },
      process.env.JWT_SECRET || 'my_secret_key',
      { expiresIn: process.env.JWT_EXPIRES_IN || '24h' }
    );

    // ‚úÖ Tr·∫£ v·ªÅ d·ªØ li·ªáu ng∆∞·ªùi d√πng
    res.json({
      message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
      token,
      user: {
        user_id: user.user_id,
        username: user.username,
        email: user.email,
        full_name: user.full_name,
        phone_number: user.phone_number,
        avatar_url: user.avatar_url,
        roles: user.roles,
        is_verified: user.is_verified,
      },
    });
  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh ƒëƒÉng nh·∫≠p:', error);
    res.status(500).json({
      error: 'Login failed',
      message: error.message,
    });
  }
};
