import { RootStackParamList } from '@/app/(Types)/navigation';
import { FontAwesome, Ionicons } from '@expo/vector-icons';
import { RouteProp, useNavigation, useRoute } from '@react-navigation/native';
import { StackNavigationProp } from '@react-navigation/stack';
import axios from 'axios';
import React, { useEffect, useState } from 'react';
import {
  ActivityIndicator,
  Alert,
  Dimensions,
  Image,
  Linking,
  Platform,
  ScrollView,
  StyleSheet,
  Text,
  TextInput,
  TouchableOpacity,
  View,
} from 'react-native';

const screenWidth = Dimensions.get('window').width;

const isWeb = Platform.OS === 'web';
const LOCAL_IP = '172.20.10.7:8081';

const API_BASE = isWeb
  ? 'http://localhost:5000/api'
  : `http://${LOCAL_IP}:5000/api`;

const BASE_URL = isWeb
  ? 'http://localhost:5000'
  : `http://${LOCAL_IP}:5000`;

// ƒê·ªãnh nghƒ©a ki·ªÉu route v√† navigation
type ProductDetailRouteProp = RouteProp<RootStackParamList, 'ProductDetail'>;
type ProductDetailNavProp = StackNavigationProp<RootStackParamList, 'ProductDetail'>;

const ProductDetail: React.FC = () => {
  const route = useRoute<ProductDetailRouteProp>();
  const navigation = useNavigation<ProductDetailNavProp>();
  const { product } = route.params;
  const [favorite, setFavorite] = useState(false);

  // ‚≠ê State ƒë√°nh gi√° & b√¨nh lu·∫≠n
  const [reviews, setReviews] = useState<any[]>([]);
  const [loadingReviews, setLoadingReviews] = useState(true);
  const [newComment, setNewComment] = useState('');
  const [rating, setRating] = useState(5);

  useEffect(() => {
    fetchReviews();
  }, []);

  const fetchReviews = async () => {
    try {
      const res = await axios.get(`${API_BASE}/reviews?listing_id=${product.listing_id}`);
      setReviews(res.data || []);
    } catch (err) {
      console.error('L·ªói t·∫£i ƒë√°nh gi√°:', err);
    } finally {
      setLoadingReviews(false);
    }
  };

  const handleAddReview = async () => {
    if (!newComment.trim()) return Alert.alert('Vui l√≤ng nh·∫≠p b√¨nh lu·∫≠n!');
    try {
      const res = await axios.post(`${API_BASE}/reviews`, {
        listing_id: product.listing_id,
        reviewer_id: 1,
        reviewed_user_id: product.user_id || 2,
        rating,
        comment: newComment,
      });
      setReviews([res.data, ...reviews]);
      setNewComment('');
      setRating(5);
      Alert.alert('‚úÖ G·ª≠i ƒë√°nh gi√° th√†nh c√¥ng!');
    } catch (err) {
      console.error(err);
      Alert.alert('‚ùå Kh√¥ng th·ªÉ g·ª≠i ƒë√°nh gi√°');
    }
  };

  const contactSeller = () => {
    if (product?.phone_number) {
      Linking.openURL(`tel:${product.phone_number}`);
    } else {
      Alert.alert('Kh√¥ng c√≥ s·ªë ƒëi·ªán tho·∫°i c·ªßa ng∆∞·ªùi b√°n');
    }
  };

  const scheduleAppointment = () => {
    navigation.navigate('PaymentInfo', { product });
  };

  // ‚úÖ X·ª≠ l√Ω ƒë∆∞·ªùng d·∫´n ·∫£nh chu·∫©n web/mobile
  const getFullImageUrl = (path: string) => {
    if (!path) return 'https://via.placeholder.com/350x200?text=No+Image';
    if (path.startsWith('http')) return path;
    return `${BASE_URL}${path.startsWith('/') ? path : `/${path}`}`;
  };

  return (
    <View style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>
          <Ionicons name="arrow-back" size={24} color="#fff" />
        </TouchableOpacity>
        <View style={{ flex: 1 }} />
        <TouchableOpacity style={styles.shareButton}>
          <Ionicons name="share-social" size={24} color="#fff" />
        </TouchableOpacity>
      </View>

      <ScrollView style={styles.content}>
        {/* üñºÔ∏è ·∫¢nh s·∫£n ph·∫©m */}
        <ScrollView
          horizontal
          pagingEnabled
          showsHorizontalScrollIndicator={false}
          style={styles.imageContainer}
        >
          {(product.images && product.images.length > 0
            ? product.images
            : [{ image_url: product.main_image }]
          ).map((img: { image_url: string }, index: number) => {
            const imageUrl = getFullImageUrl(img.image_url);
            return (
              <View key={index} style={styles.imageWrapper}>
                <Image
                  source={{ uri: imageUrl }}
                  style={styles.mainImage}
                  resizeMode="cover"
                />
              </View>
            );
          })}
        </ScrollView>

        {/* Th√¥ng tin c∆° b·∫£n */}
        <View style={styles.productInfo}>
          <Text style={styles.productName}>{product?.title || 'T√™n s·∫£n ph·∫©m'}</Text>
          <Text style={styles.productPrice}>
            {product?.price ? `${Number(product.price).toLocaleString()} ƒë` : 'Li√™n h·ªá'}
          </Text>
          <View style={styles.productMeta}>
            <Text style={styles.metaText}>M√£: {product?.listing_id}</Text>
            <View style={styles.viewCount}>
              <Ionicons name="eye" size={14} color="#666" />
              <Text style={styles.metaText}> {product?.view_count || 0}</Text>
            </View>
          </View>
        </View>

        {/* Th√¥ng s·ªë */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Th√¥ng s·ªë c∆° b·∫£n</Text>
          <View style={styles.infoGrid}>
            <View style={styles.infoItem}>
              <Text style={styles.infoLabel}>H√£ng xe</Text>
              <Text style={styles.infoValue}>{product?.manufacturer_name || 'ƒêang c·∫≠p nh·∫≠t'}</Text>
            </View>
            <View style={styles.infoItem}>
              <Text style={styles.infoLabel}>NƒÉm s·∫£n xu·∫•t</Text>
              <Text style={styles.infoValue}>{product?.year_of_manufacture || 'Kh√¥ng r√µ'}</Text>
            </View>
            <View style={styles.infoItem}>
              <Text style={styles.infoLabel}>Lo·∫°i xe</Text>
              <Text style={styles.infoValue}>{product?.body_type || 'Kh√¥ng r√µ'}</Text>
            </View>
            <View style={styles.infoItem}>
              <Text style={styles.infoLabel}>Khu v·ª±c</Text>
              <Text style={styles.infoValue}>{product?.province_city || 'To√†n qu·ªëc'}</Text>
            </View>
          </View>
        </View>

        {/* M√¥ t·∫£ */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>M√¥ t·∫£ chi ti·∫øt</Text>
          <Text style={styles.descriptionText}>
            {product?.description || 'Kh√¥ng c√≥ m√¥ t·∫£ chi ti·∫øt cho s·∫£n ph·∫©m n√†y.'}
          </Text>
        </View>

        {/* Ng∆∞·ªùi b√°n */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Th√¥ng tin ng∆∞·ªùi b√°n</Text>
          <View style={styles.sellerInfo}>
            <Image
              source={{
                uri: product?.partner_avatar || 'https://via.placeholder.com/60x60?text=User',
              }}
              style={styles.sellerAvatar}
            />
            <View>
              <Text style={styles.sellerName}>{product?.username || 'ƒê·ªëi t√°c OKXE'}</Text>
              <Text style={styles.sellerStat}>
                S·ªë ƒëi·ªán tho·∫°i: {product?.phone_number || 'Kh√¥ng c√≥'}
              </Text>
            </View>
          </View>
        </View>

        {/* Cam k·∫øt */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Cam k·∫øt t·ª´ c·ª≠a h√†ng</Text>
          <View style={styles.commitmentList}>
            {[
              'Xe ch√≠nh h√£ng, r√µ ngu·ªìn g·ªëc',
              'Gi√° b√°n minh b·∫°ch, kh√¥ng ph√°t sinh',
              'H·ªó tr·ª£ tr·∫£ g√≥p linh ho·∫°t',
            ].map((text, idx) => (
              <View key={idx} style={styles.commitmentItem}>
                <Ionicons name="checkmark-circle" size={20} color="#00C6CF" />
                <Text style={styles.commitmentText}>{text}</Text>
              </View>
            ))}
          </View>
        </View>

        {/* ‚≠ê ƒê√°nh gi√° & b√¨nh lu·∫≠n */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>ƒê√°nh gi√° & B√¨nh lu·∫≠n</Text>

          {loadingReviews ? (
            <ActivityIndicator color="#00C6CF" />
          ) : reviews.length === 0 ? (
            <Text style={{ color: '#777' }}>Ch∆∞a c√≥ ƒë√°nh gi√° n√†o.</Text>
          ) : (
            reviews.map((r) => (
              <View key={r.review_id} style={styles.reviewBox}>
                <Text style={styles.reviewer}>
                  ‚≠ê {r.rating} ‚Äì {r.reviewer_name || 'Ng∆∞·ªùi d√πng'}
                </Text>
                <Text style={styles.comment}>{r.comment}</Text>
                <Text style={styles.date}>{new Date(r.created_at).toLocaleDateString('vi-VN')}</Text>
              </View>
            ))
          )}

          {/* Form b√¨nh lu·∫≠n */}
          <View style={styles.commentBox}>
            <Text style={styles.commentLabel}>ƒê√°nh gi√° c·ªßa b·∫°n:</Text>
            <View style={{ flexDirection: 'row', marginBottom: 8 }}>
              {[1, 2, 3, 4, 5].map((star) => (
                <TouchableOpacity key={star} onPress={() => setRating(star)}>
                  <FontAwesome
                    name={star <= rating ? 'star' : 'star-o'}
                    size={24}
                    color="#FFD700"
                    style={{ marginRight: 4 }}
                  />
                </TouchableOpacity>
              ))}
            </View>
            <TextInput
              style={styles.input}
              placeholder="Vi·∫øt b√¨nh lu·∫≠n c·ªßa b·∫°n..."
              value={newComment}
              onChangeText={setNewComment}
              multiline
            />
            <TouchableOpacity style={styles.sendButton} onPress={handleAddReview}>
              <Text style={styles.sendButtonText}>G·ª≠i ƒë√°nh gi√°</Text>
            </TouchableOpacity>
          </View>
        </View>
      </ScrollView>

      {/* Thanh d∆∞·ªõi */}
      <View style={styles.bottomBar}>
        <TouchableOpacity style={styles.favoriteButton} onPress={() => setFavorite(!favorite)}>
          <FontAwesome
            name={favorite ? 'heart' : 'heart-o'}
            size={24}
            color={favorite ? '#ff4444' : '#666'}
          />
        </TouchableOpacity>
        <TouchableOpacity style={styles.contactButton} onPress={contactSeller}>
          <Text style={styles.contactButtonText}>Li√™n h·ªá ngay</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.buyButton} onPress={scheduleAppointment}>
          <Text style={styles.buyButtonText}>Mua ngay</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
};

export default ProductDetail;

// --- STYLE ---
const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: '#f5f5f5' },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#00C6CF',
    paddingTop: 40,
    paddingBottom: 16,
    paddingHorizontal: 16,
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    zIndex: 10,
  },
  backButton: { padding: 4 },
  shareButton: { padding: 4 },
  content: { flex: 1, marginTop: 80, marginBottom: 70 },
  imageContainer: { height: 300, backgroundColor: '#fff' },
  imageWrapper: {
    width: screenWidth,
    height: 300,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#f8f8f8',
  },
  mainImage: {
    width: '100%',
    height: '100%',
    maxWidth: 800,
  },
  productInfo: { backgroundColor: '#fff', padding: 16, borderBottomWidth: 1, borderBottomColor: '#eee' },
  productName: { fontSize: 24, fontWeight: 'bold', marginBottom: 8 },
  productPrice: { fontSize: 20, fontWeight: 'bold', color: '#00C6CF', marginBottom: 8 },
  productMeta: { flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' },
  metaText: { color: '#666', fontSize: 14 },
  viewCount: { flexDirection: 'row', alignItems: 'center' },
  section: { backgroundColor: '#fff', padding: 16, marginTop: 8, borderBottomWidth: 1, borderBottomColor: '#eee' },
  sectionTitle: { fontSize: 18, fontWeight: 'bold', marginBottom: 12, color: '#333' },
  infoGrid: { flexDirection: 'row', flexWrap: 'wrap', justifyContent: 'space-between' },
  infoItem: { width: '48%', marginBottom: 16 },
  infoLabel: { fontSize: 14, color: '#666', marginBottom: 4 },
  infoValue: { fontSize: 16, fontWeight: '500' },
  descriptionText: { fontSize: 15, lineHeight: 22, color: '#555' },
  sellerInfo: { flexDirection: 'row', alignItems: 'center', marginBottom: 16 },
  sellerAvatar: { width: 60, height: 60, borderRadius: 30, marginRight: 12 },
  sellerName: { fontSize: 16, fontWeight: 'bold', marginBottom: 4 },
  sellerStat: { fontSize: 14, color: '#666' },
  commitmentList: { marginTop: 8 },
  commitmentItem: { flexDirection: 'row', alignItems: 'center', marginBottom: 12 },
  commitmentText: { marginLeft: 8, fontSize: 14 },
  bottomBar: {
    flexDirection: 'row',
    backgroundColor: '#fff',
    padding: 12,
    borderTopWidth: 1,
    borderTopColor: '#eee',
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
  },
  favoriteButton: { padding: 12, justifyContent: 'center', alignItems: 'center', marginRight: 12 },
  contactButton: {
    flex: 1,
    backgroundColor: '#fff',
    borderWidth: 1,
    borderColor: '#00C6CF',
    borderRadius: 6,
    padding: 12,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12,
  },
  contactButtonText: { color: '#00C6CF', fontWeight: 'bold' },
  buyButton: { flex: 1, backgroundColor: '#00C6CF', borderRadius: 6, padding: 12, justifyContent: 'center', alignItems: 'center' },
  buyButtonText: { color: '#fff', fontWeight: 'bold' },
  reviewBox: { backgroundColor: '#f9f9f9', borderRadius: 8, padding: 10, marginTop: 10 },
  reviewer: { fontWeight: 'bold', color: '#333' },
  comment: { color: '#444', marginTop: 4 },
  date: { fontSize: 12, color: '#999', marginTop: 2 },
  commentBox: { marginTop: 16 },
  commentLabel: { fontWeight: 'bold', marginBottom: 6 },
  input: { borderWidth: 1, borderColor: '#ddd', borderRadius: 6, padding: 10, minHeight: 60, textAlignVertical: 'top' },
  sendButton: { backgroundColor: '#00C6CF', padding: 10, borderRadius: 6, marginTop: 8 },
  sendButtonText: { color: '#fff', fontWeight: 'bold', textAlign: 'center' },
});
